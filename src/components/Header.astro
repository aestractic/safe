---
import Logo from './Logo.astro'
---

<header id="landing-header" class="py-3 px-4 md:px-10 flex items-center fixed top-0 w-full justify-between z-40 text-white">
    <div class="flex flex-grow md:basis-0">
        <a href="./">
            <Logo />
        </a>
    </div>

    <!-- Menu Hamburguesa para móviles -->
    <button id="menu-toggle" class="md:hidden flex flex-col justify-center items-center w-8 h-8">
        <span class="block w-6 h-0.5 bg-white mb-1 transition-all duration-300"></span>
        <span class="block w-6 h-0.5 bg-white mb-1 transition-all duration-300"></span>
        <span class="block w-6 h-0.5 bg-white transition-all duration-300"></span>
    </button>

    <!-- Navegación Desktop -->
    <nav class="hidden md:flex">
        <ul class="flex text-sm [&>li>a]:transition-colors [&>li>a]:duration-500 [&>li>a]:text-current [&>li>a]:font-medium [&>li>a]:inline-block [&>li>a]:px-4 [&>li>a]:py-2">
            <li><a href="/.">Home</a></li>
            <li><a href="#asi">Asiático</a></li>
            <li><a href="#euro">Europeo</a></li>
            <li><a href="#ame">Americano</a></li>
            <li><a href="#abo">Nosotros</a></li>
        </ul>
    </nav>
    <nav class="hidden md:flex flex-grow justify-end basis-0">
        <ul class="flex text-sm [&>li>a]:transition-colors [&>li>a]:duration-500 [&>li>a]:text-current [&>li>a]:font-medium [&>li>a]:inline-block [&>li>a]:px-4 [&>li>a]:py-2">				
            <li><a href="https://www.google.com" target="_blank">Cotizar</a></li>
            <li><a href="#sop">Soporte</a></li>
        </ul>
    </nav>

    <!-- Menú Móvil -->
    <nav id="mobile-menu" class="fixed top-0 right-0 h-full w-64 bg-black/95 backdrop-blur-lg transform translate-x-full transition-transform duration-300 md:hidden">
        <div class="p-6 pt-20">
            <ul class="space-y-4 text-lg">
                <li><a href="/." class="block text-white hover:text-gray-300 transition-colors">Home</a></li>
                <li><a href="#asi" class="block text-white hover:text-gray-300 transition-colors">Asiático</a></li>
                <li><a href="#euro" class="block text-white hover:text-gray-300 transition-colors">Europeo</a></li>
                <li><a href="#ame" class="block text-white hover:text-gray-300 transition-colors">Americano</a></li>
                <li><a href="#abo" class="block text-white hover:text-gray-300 transition-colors">Nosotros</a></li>
                <li class="pt-4 border-t border-white/20">
                    <a href="https://www.google.com" target="_blank" class="block text-white hover:text-gray-300 transition-colors">Cotizar</a>
                </li>
                <li><a href="#sop" class="block text-white hover:text-gray-300 transition-colors">Soporte</a></li>
            </ul>
        </div>
    </nav>

    <div id="menu-backdrop" class={'absolute bg-black/5 backdrop-blur-lg rounded translate-x-[var(--left)] translate-y-[var(--top)] left-0 top-0 w-[var(--width)] h-[var(--height)] transition-all duration-500 ease-in-out opacity-0 -z-10'} />
</header>

<script>
  // Menú móvil
  const menuToggle = document.querySelector('#menu-toggle') as HTMLButtonElement
  const mobileMenu = document.querySelector('#mobile-menu') as HTMLElement
  const mobileMenuLinks = document.querySelectorAll('#mobile-menu a')
  
  if (menuToggle && mobileMenu) {
    menuToggle.addEventListener('click', () => {
      const isOpen = !mobileMenu.classList.contains('translate-x-full')
      
      if (!isOpen) {
        mobileMenu.classList.remove('translate-x-0')
        mobileMenu.classList.add('translate-x-full')
        // Animación del botón hamburguesa
        menuToggle.children[0].classList.remove('rotate-45', 'translate-y-1.5')
        menuToggle.children[1].classList.remove('opacity-0')
        menuToggle.children[2].classList.remove('-rotate-45', '-translate-y-1.5')
      } else {
        mobileMenu.classList.remove('translate-x-full')
        mobileMenu.classList.add('translate-x-0')
        // Animación del botón hamburguesa
        menuToggle.children[0].classList.add('rotate-45', 'translate-y-1.5')
        menuToggle.children[1].classList.add('opacity-0')
        menuToggle.children[2].classList.add('-rotate-45', '-translate-y-1.5')
      }
    })
    
    // Cerrar menú al hacer click en un enlace
    mobileMenuLinks.forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu.classList.remove('translate-x-0')
        mobileMenu.classList.add('translate-x-full')
        menuToggle.children[0].classList.remove('rotate-45', 'translate-y-1.5')
        menuToggle.children[1].classList.remove('opacity-0')
        menuToggle.children[2].classList.remove('-rotate-45', '-translate-y-1.5')
      })
    })
  }

  // Efecto backdrop para desktop
  const listItem = document.querySelectorAll("#landing-header nav:not(#mobile-menu) li")
  const menuBackDrop = document.querySelector('#menu-backdrop') as HTMLElement

  listItem.forEach((item) => {
    item.addEventListener("mouseenter", () => {
      const { left, top, width, height } = item.getBoundingClientRect()

      menuBackDrop.style.setProperty("--left", `${left}px`)
      menuBackDrop.style.setProperty("--top", `${top}px`)
      menuBackDrop.style.setProperty("--width", `${width}px`)
      menuBackDrop.style.setProperty("--height", `${height}px`)
      menuBackDrop.style.opacity = "1"
      menuBackDrop.style.visibility = "visible"
    })

    item.addEventListener("mouseleave", () => {
      menuBackDrop.style.opacity = "0"
      menuBackDrop.style.visibility = "hidden"
    })
  })
</script>


<script>
    const $header = document.querySelector('#landing-header') as HTMLElement
  
    const observerOptions = {
      root: null,
      rootMargin: "0px", // en cuanto se vea el elemento
      threshold: [0.1, 0.25, 0.5, 0.75, 0.9], // múltiples thresholds para mejor detección
    }

    const observer = new IntersectionObserver((entries) => {
      // Encontrar la sección más visible
      let mostVisibleEntry = null
      let maxIntersectionRatio = 0
      
      entries.forEach((entry) => {
        if (entry.isIntersecting && entry.intersectionRatio > maxIntersectionRatio) {
          maxIntersectionRatio = entry.intersectionRatio
          mostVisibleEntry = entry
        }
      })
      
      // Cambiar color basado en la sección más visible
      if (mostVisibleEntry) {
        // @ts-ignore - Ignorar error de TypeScript para target
        const color = mostVisibleEntry.target.getAttribute("data-header-color")
        if (color) {
          $header.style.color = color
        }
      }
    }, observerOptions)
  
    const $section = document.querySelectorAll(".landing-section")
    $section.forEach((section) => observer.observe(section))
  </script>